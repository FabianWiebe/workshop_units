diff --git a/include/quantity.h b/include/quantity.h
index 1724837..b5bdd4f 100644
--- a/include/quantity.h
+++ b/include/quantity.h
@@ -25,6 +25,7 @@
 #include "common_ratio.h"
 #include "unit.h"
 #include <limits>
+#include <type_traits>
 
 // Requires
 
@@ -149,28 +150,20 @@ namespace units {
     [[nodiscard]] constexpr quantity operator+() const { return *this; }
     [[nodiscard]] constexpr quantity operator-() const { return quantity(-count()); }
 
-    template<typename T = Rep,
-             Requires<!treat_as_floating_point<T>> = true>
     constexpr quantity& operator++()
     {
       ++value_;
       return *this;
     }
 
-    template<typename T = Rep,
-             Requires<!treat_as_floating_point<T>> = true>
     [[nodiscard]] constexpr quantity operator++(int) { return quantity(value_++); }
 
-    template<typename T = Rep,
-             Requires<!treat_as_floating_point<T>> = true>
     constexpr quantity& operator--()
     {
       --value_;
       return *this;
     }
 
-    template<typename T = Rep,
-             Requires<!treat_as_floating_point<T>> = true>
     [[nodiscard]] constexpr quantity operator--(int) { return quantity(value_--); }
 
     constexpr quantity& operator+=(const quantity& q)
@@ -210,7 +203,7 @@ namespace units {
 
     template<typename Rep2>
     [[nodiscard]] friend constexpr auto operator+(const quantity& lhs, const quantity<Unit, Rep2>& rhs)
-        -> quantity<Unit, decltype(lhs.count() + rhs.count())>
+        -> quantity<Unit, decltype(std::declval<Rep>() + std::declval<Rep2>())>
     {
       using ret = quantity<Unit, decltype(lhs.count() + rhs.count())>;
       return ret(lhs.count() + rhs.count());
@@ -218,7 +211,7 @@ namespace units {
 
     template<typename Rep2>
     [[nodiscard]] friend constexpr auto operator-(const quantity& lhs, const quantity<Unit, Rep2>& rhs)
-        -> quantity<Unit, decltype(lhs.count() - rhs.count())>
+        -> quantity<Unit, decltype(std::declval<Rep>() - std::declval<Rep2>())>
     {
       using ret = quantity<Unit, decltype(lhs.count() - rhs.count())>;
       return ret(lhs.count() - rhs.count());
@@ -226,13 +219,15 @@ namespace units {
 
     template<typename Rep2,
              Requires<!is_quantity<Rep2>> = true>
-    [[nodiscard]] friend constexpr auto operator*(const quantity& q, const Rep2& v) -> quantity<Unit, decltype(q.count() * v)>
+    [[nodiscard]] friend constexpr auto operator*(const quantity& q, const Rep2& v)
+        -> quantity<Unit, decltype(std::declval<Rep>() * std::declval<Rep2>())>
     {
       using ret = quantity<Unit, decltype(q.count() * v)>;
       return ret(q.count() * v);
     }
 
-    template<typename Rep2>
+    template<typename Rep2,
+             Requires<!is_quantity<Rep2>> = true>
     [[nodiscard]] friend constexpr auto operator*(const Rep2& v, const quantity& q) -> decltype(q * v)
     {
       return q * v;
@@ -240,7 +235,8 @@ namespace units {
 
     template<typename Rep2,
              Requires<!is_quantity<Rep2>> = true>
-    [[nodiscard]] friend constexpr auto operator/(const quantity& q, const Rep2& v) -> quantity<Unit, decltype(q.count() / v)>
+    [[nodiscard]] friend constexpr auto operator/(const quantity& q, const Rep2& v)
+        -> quantity<Unit, decltype(std::declval<Rep>() / std::declval<Rep2>())>
     {
       using ret = quantity<Unit, decltype(q.count() / v)>;
       return ret(q.count() / v);
@@ -248,12 +244,12 @@ namespace units {
 
     template<typename Rep2>
     [[nodiscard]] friend constexpr auto operator/(const quantity& lhs, const quantity<Unit, Rep2>& rhs)
-        -> decltype(lhs.count() / rhs.count())
+        -> decltype(std::declval<Rep>() / std::declval<Rep2>())
     {
       return lhs.count() / rhs.count();
     }
 
-    template<typename T = Rep, typename Rep2,
+    template<typename Rep2, typename T = Rep,
              Requires<!is_quantity<Rep2> &&
                       !treat_as_floating_point<T> &&
                       !treat_as_floating_point<Rep2>> = true>
@@ -262,7 +258,7 @@ namespace units {
       return quantity(q.count() % v);
     }
 
-    template<typename T = Rep, typename Rep2,
+    template<typename Rep2, typename T = Rep,
              Requires<!treat_as_floating_point<T> &&
                       !treat_as_floating_point<Rep2>> = true>
     [[nodiscard]] friend constexpr quantity operator%(const quantity& lhs, const quantity<Unit, Rep2>& rhs)
